import pygame, math, sys
from math import ceil
from pygame import *
from pygame.locals import *

score = 0
ORANGE = (255,165,0)
LIGHTGRAY = (225, 225, 225)
DARKGRAY = (160, 160, 160)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 128, 0)
WIN_WIDTH = 608
WIN_HEIGHT = 704
BLOCK_WIDTH = 32
BLOCK_HEIGHT = 32
PLAYER_WIDTH = 32
PLAYER_HEIGHT = 32
DEPTH = 32
FLAGS = 0
JUMP_VEL = 8
MOVE_VEL = 8
TERMINAL_VELOCITY = 100
BACKGROUND_IMAGE = 'PacBack.jpg'
windowSurface = pygame.display.set_mode((WIN_HEIGHT, WIN_WIDTH), 0, 32)

def main():
    global WIN_HEIGHT, WIN_WIDTH
    pygame.init()
    screen = pygame.display.set_mode((WIN_WIDTH,WIN_HEIGHT), FLAGS, DEPTH)
    timer = pygame.time.Clock()

    up = False
    down = False
    left = False
    right = False

    sprites = pygame.sprite.Group()
    power_list = []
    platforms = []

    x = 0
    y = 0
    # The drawing of the level. P means "platform", M stands for "me" (or "MARIO")
    #  You can add different things here
    level = [
            "PPPPPPPPPPPPPPPPPPP",
            "PCCCCCCCCPCCCCCCCCP",
            "PCPPCPPPCPCPPPCPPCP",
            "PYPPCPPPCPCPPPCPPYP",
            "PCCCCCCCCCCCCCCCCCP",
            "PCPPCPCPPPPPCPCPPCP",
            "PCCCCPCCCPCCCPCCCCP",
            "PPPPCPPPCPCPPPCPPPP",
            "PPPPCP       PCPPPP",
            "PPPPCP PP PP PCPPPP",
            "    C  P   P  C    ",
            "PPPPCP PPPPP PCPPPP",
            "PPPPCP   F   PCPPPP",
            "PPPPCPCPPPPPCPCPPPP",
            "PCCCCCCCCPCCCCCCCCP",
            "PCPPCPPPCPCPPPCPPCP",
            "PYCPCCCCCMCCCCCPCYP",
            "PPCPCPCPPPPPCPCPCPP",
            "PCCCCPCCCPCCCPCCCCP",
            "PCPPPPPPCPCPPPPPPCP",
            "PCCCCCCCCCCCCCCCCCP",
            "PPPPPPPPPPPPPPPPPPP",]
    # build the level
    playerFlag = True
    for row in level:
        for col in row:
            if col == "Y":
                power = Power(x, y)
                power_list.append(power)
                sprites.add(power)
            if col == "P":
                p = Platform(x, y)
                platforms.append(p)
                sprites.add(p)
            if col == "C":
                pellets = Pellets(x, y)
                sprites.add(pellets)
            if col == "F":
                fruit = Fruit(x, y)
                sprites.add(fruit)
            if col == "M":
                if playerFlag:
                    # Give the player an initial position (x and y) then width and height
                    player = Player(x,y, PLAYER_WIDTH, PLAYER_HEIGHT)
                    sprites.add(player)
                    # Do not allow another player to be added
                    playerFlag = False
            x += BLOCK_WIDTH
        y += BLOCK_HEIGHT
        x = 0

    if playerFlag:
        print("You didn't include a player!")
        pygame.quit()
    total_level_width = len(level)
    total_level_height = len(level)

    # Thanks to "opengameart.org"
    bgIMG = pygame.image.load(BACKGROUND_IMAGE).convert_alpha()
    repeatedImageWidth = int(WIN_WIDTH)
    myImage = pygame.transform.scale(bgIMG, (repeatedImageWidth, WIN_HEIGHT))


    while 1:
        timer.tick(60)
        pygame.event.pump()
        for e in pygame.event.get():

            if e.type == QUIT:
                pygame.quit()
                sys.exit()

            if e.type == KEYDOWN and e.key == K_UP:
                up = True
            if e.type == KEYDOWN and e.key == K_DOWN:
                down = True
            if e.type == KEYDOWN and e.key == K_LEFT:
                left = True
            if e.type == KEYDOWN and e.key == K_RIGHT:
                right = True

            if e.type == KEYUP and e.key == K_UP:
                up = False
            if e.type == KEYUP and e.key == K_DOWN:
                down = False
            if e.type == KEYUP and e.key == K_RIGHT:
                right = False
            if e.type == KEYUP and e.key == K_LEFT:
                left = False

        # draw background. This is a repeated background
        for x in range(0,int(total_level_width)):
            screen.blit(myImage,(x*repeatedImageWidth,0))

        # update player, draw everything else

        player.update(up, down, left, right, platforms,sprites,power_list)
        sprites.draw(screen)

        pygame.display.update()


# Player class. Change this to include an image
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y,BLOCK_WIDTH, BLOCK_HEIGHT):
        super().__init__()
        self.x = 0
        self.y = 0
        self.image = Surface((BLOCK_WIDTH, BLOCK_HEIGHT))
        self.image.convert()
        self.image.fill(GREEN)
        self.rect = Rect(x, y, BLOCK_WIDTH, BLOCK_HEIGHT)

    def update(self, up, down, left, right,platforms,sprites,power_list):
        # Start with no change in x-position... see what happened
        if up:
            self.y = -JUMP_VEL
        if down:
            self.y = JUMP_VEL
        if left:
            self.x = -MOVE_VEL
        if right:
            self.x = MOVE_VEL
        if self.rect.right > WIN_WIDTH:
            self.rect.left = 0
        if self.rect.left < 0:
            self.rect.right = WIN_WIDTH
        # increment in x direction
        self.rect.left += self.x
        # do x-axis collisions
        self.collide(self.x, 0, platforms, sprites,power_list)
        # increment in y direction
        self.rect.top += self.y
        # do y-axis collisions
        self.collide(0, self.y, platforms,sprites,power_list)

    def collide(self, x, y, platforms, sprites,power_list):
        for s in sprites:
            if s not in platforms:
                if s != self.rect and self.rect.colliderect(s.rect) and s in power_list:
                    print("ok")
                    sprites.remove(s)
                    power_list.remove(s)
                elif s != self.rect and self.rect.colliderect(s.rect):
                    sprites.remove(s)

        for p in platforms:
            if pygame.sprite.collide_rect(self, p):
                if x > 0:
                    self.rect.right = p.rect.left
                    self.x = 0
                    #print ("collide right")
                if x < 0:
                    self.rect.left = p.rect.right
                    self.x = 0
                    #print ("collide left")
                if y > 0:
                    self.rect.bottom = p.rect.top
                    self.y = 0
                    #print("collide bottom"
                if y < 0:
                    self.rect.top = p.rect.bottom
                    self.y = 0
                    #print("collide top")

class Pellets(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = Surface((BLOCK_WIDTH, BLOCK_HEIGHT))
        self.image.convert()
        self.image.fill(BLUE)
        self.rect = Rect(x, y, BLOCK_WIDTH/4, BLOCK_HEIGHT/4)

class Power(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.x = 0
        self.y = 0
        self.image = Surface((BLOCK_WIDTH, BLOCK_HEIGHT))
        self.image.convert()
        self.image.fill(WHITE)
        self.rect = Rect(x, y, BLOCK_WIDTH, BLOCK_HEIGHT)

class Fruit(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = Surface((BLOCK_WIDTH, BLOCK_HEIGHT))
        self.image.convert()
        self.image.fill(ORANGE)
        self.rect = Rect(x, y, BLOCK_WIDTH, BLOCK_HEIGHT)

class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = Surface((BLOCK_WIDTH, BLOCK_HEIGHT))
        self.image.convert()
        self.image.fill(RED)
        self.rect = Rect(x, y, BLOCK_WIDTH, BLOCK_HEIGHT)

    def update(self):
        pass

if __name__ == "__main__":
    main()
